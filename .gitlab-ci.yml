image: geeksaccelerator/docker-library:golang1.12-docker

services:
  - docker:dind

variables:
  DOCKER_TLS_CERTDIR: ""

stages:
  - setup:dev
  - build:dev
  - migrate:dev
  - deploy:dev
  - setup:stage
  - build:stage
  - migrate:stage
  - deploy:stage
  - setup:prod
  - build:prod
  - migrate:prod
  - deploy:prod
  - release:prod

cache:
  key: ${CI_COMMIT_REF_SLUG}

# Everything should get this, whether through subtemplates or explicitly
# embedded in a job.
.job_tmpl: &job_tmpl
  only:
    - master

.setup_tmpl: &setup_tmpl
  <<: *job_tmpl
  script:
    - 'go build -o cicd ./build/cicd'
    - './cicd --env=${TARGET_ENV} deploy infrastructure'
  artifacts:
    paths:
      - cicd

.migrate_tmpl: &migrate_tmpl
  <<: *job_tmpl
  script:
    - './cicd --env=${TARGET_ENV} schema migrate'
  artifacts:
    paths:
      - cicd

.build_tmpl: &build_tmpl
  <<: *job_tmpl
  script:
    - './cicd --env=${TARGET_ENV} build ${TARGET_TYPE} --name=${TARGET_REF}'
  artifacts:
    paths:
      - cicd

.deploy_tmpl: &deploy_tmpl
  <<: *job_tmpl
  script:
    - './cicd --env=${TARGET_ENV} deploy ${TARGET_TYPE} --name=${TARGET_REF}'
  artifacts:
    paths:
      - cicd

infra:setup:prod:
  <<: *setup_tmpl
  stage: setup:prod
  tags:
    - prod
  only:
    - master
    - prod
    - /^prod-.*$/
  variables:
    TARGET_ENV: 'prod'
    AWS_USE_ROLE: 'true'

db:migrate:prod:
  <<: *migrate_tmpl
  stage: migrate:prod
  tags:
    - prod
  only:
    - master
    - prod
    - /^prod-.*$/
  variables:
    TARGET_ENV: 'prod'
    AWS_USE_ROLE: 'true'
  #when: manual

aws-ecs-go-web-api:build:prod:
  <<: *build_tmpl
  stage: build:prod
  tags:
    - prod
  only:
    - master
    - prod
    - prod-web-api
  variables:
    TARGET_ENV: 'prod'
    TARGET_TYPE: 'service'
    TARGET_REF: 'aws-ecs-go-web-api'
    AWS_USE_ROLE: 'true'
aws-ecs-go-web-api:deploy:prod:
  <<: *deploy_tmpl
  stage: deploy:prod
  tags:
    - prod
  only:
    - master
    - prod
    - prod-web-api
  dependencies:
    - 'aws-ecs-go-web-api:build:prod'
    - 'db:migrate:prod'
  variables:
    TARGET_ENV: 'prod'
    TARGET_TYPE: 'service'
    TARGET_REF: 'aws-ecs-go-web-api'
    AWS_USE_ROLE: 'true'
  #when: manual

aws-lambda-python-ddlogs:build:prod:
  <<: *build_tmpl
  stage: build:prod
  tags:
    - prod
  only:
    - master
    - prod
    - prod-ddlogs
  variables:
    TARGET_ENV: 'prod'
    TARGET_TYPE: 'function'
    TARGET_REF: 'aws-lambda-python-ddlogs'
    AWS_USE_ROLE: 'true'
aws-lambda-python-ddlogs:deploy:prod:
  <<: *deploy_tmpl
  stage: deploy:prod
  tags:
    - prod
  only:
    - master
    - prod
    - prod-ddlogs
  dependencies:
    - 'aws-lambda-python-ddlogs:build:prod'
    - 'db:migrate:prod'
  variables:
    TARGET_ENV: 'prod'
    TARGET_TYPE: 'function'
    TARGET_REF: 'aws-lambda-python-ddlogs'
    AWS_USE_ROLE: 'true'
  #when: manual

tag:release:prod:
  stage: release:prod
  script:
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git tag $(cicd --env=prod semver inc-patch -version=$(git tag | sort -V | tail -n 1))
    - git push "https://${GITLAB_USER_NAME}:${CI_GIT_TOKEN}@${CI_REPOSITORY_URL#*@}" --tags
  tags:
    - master
  only:
    - master
  dependencies:
    - 'aws-ecs-go-web-api:deploy:prod'
    - 'aws-lambda-python-ddlogs:deploy:prod'
